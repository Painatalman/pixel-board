{"version":3,"sources":["components/Board.module.css","App.module.css","errorHandlers/isRequired.js","contexts/PaintColorContext.js","components/BoardPixel.js","components/Board.js","factories/createBoardPixelData.js","components/BoardColor.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","paramName","Error","defaultColor","PaintColorContext","React","createContext","PaintColorProvider","children","initialColor","useState","value","color","setColor","Provider","Consumer","NoContextBoardPixel","x","y","onClick","fill","width","height","defaultProps","paintColor","useContext","Board","pixels","boardPixels","i","j","pixelData","find","pixel","isRequired","createBoardPixelData","push","viewBox","className","styles","board","map","pixelProps","key","BoardPixel","options","label","onChange","e","target","App","BoardColor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d15942d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__1ePIE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2v5Qe\"};","export default (paramName='field') => { \r\n  throw new Error(`${paramName} is required`)\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nconst defaultColor = '#000000'\r\nconst PaintColorContext = React.createContext()\r\n\r\nexport function PaintColorProvider({ children, initialColor=defaultColor }) {\r\n  const [color, setColor] = useState(initialColor)\r\n  const value = {\r\n    color,\r\n    setColor\r\n  }\r\n\r\n  return <PaintColorContext.Provider value={value}>{ children }</PaintColorContext.Provider>\r\n}\r\n\r\nexport const PaintColorConsumer = PaintColorContext.Consumer\r\n\r\nexport default PaintColorContext","import React, { useState, useContext } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport PaintColorContext from '../contexts/PaintColorContext'\r\n\r\n\r\n// pure version, no context (for tests)\r\n// but maybe mocking it would've been better\r\n// see: https://medium.com/@ryandrewjohnson/unit-testing-components-using-reacts-new-context-api-4a5219f4b3fe\r\nexport const NoContextBoardPixel = ({ x, y, color, onClick }) => (\r\n  <rect\r\n    x={x}\r\n    y={y}\r\n    fill={color}\r\n    onClick={onClick}\r\n    width=\"1\"\r\n    height=\"1\"\r\n  />\r\n)\r\n\r\nNoContextBoardPixel.propTypes = {\r\n  color: PropTypes.string,\r\n  x: PropTypes.number.isRequired,\r\n  y: PropTypes.number.isRequired\r\n}\r\n\r\nNoContextBoardPixel.defaultProps = {\r\n  color: \"transparent\"\r\n}\r\n\r\nexport default ({ x, y, color:initialColor='transparent' }) => {\r\n  const [color, setColor] = useState(initialColor)\r\n  let { color:paintColor } = useContext(PaintColorContext)\r\n\r\n  function toggleColor() {\r\n    setColor(\r\n      color === paintColor ? 'transparent' : paintColor\r\n    )\r\n  }\r\n  \r\n  return <NoContextBoardPixel \r\n    x={x} \r\n    y={y} \r\n    color={color} \r\n    onClick={toggleColor}\r\n  />\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport createBoardPixelData from \"../factories/createBoardPixelData\";\r\nimport BoardPixel from \"./BoardPixel\";\r\n\r\nimport styles from \"./Board.module.css\";\r\n\r\nconst Board = ({ width, height, pixels = [] }) => {\r\n  // generate pixel data\r\n  const boardPixels = [];\r\n  for (let i = 0; i < width; i++) {\r\n    for (let j = 0; j < height; j++) {\r\n      const pixelData =\r\n        pixels.find((pixel) => pixel.x === i && pixel.y === j) ||\r\n        createBoardPixelData({ x: i, y: j });\r\n\r\n      boardPixels.push(pixelData);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <svg viewBox={`0 0 ${width} ${height}`} className={styles.board}>\r\n      {boardPixels.map((pixelProps, key) => (\r\n        <BoardPixel key={key} {...pixelProps} />\r\n      ))}\r\n    </svg>\r\n  );\r\n};\r\n\r\nBoard.propTypes = {\r\n  width: PropTypes.number.isRequired,\r\n  height: PropTypes.number.isRequired,\r\n  pixels: PropTypes.arrayOf(Object),\r\n};\r\n\r\nexport default ({ width, height, pixels = [] }) => {\r\n  return <Board width={width} height={height} pixels={pixels}></Board>;\r\n};\r\n","import isRequired from '../errorHandlers/isRequired'\r\n\r\n/**\r\n * @typedef BoardPixelData\r\n * @property {number} data.x - x position of the pixel\r\n * @property {number} data.y - y position of the pixel\r\n * @property {string} [data.color=\"transparent\"] - filling color for the pixel\r\n */\r\n\r\n/**\r\n * Validates and generates data for a board pixel\r\n * @param {BoardPixelData} data\r\n * @returns {BoardPixelData} filling color for the pixel\r\n */\r\nexport default function createBoardPixelData({\r\n  x = isRequired('x'),\r\n  y = isRequired('y'), \r\n  color = 'transparent'\r\n}) {\r\n  return { x, y, color }\r\n}","import React, { useContext } from \"react\";\r\nimport PaintColorContext from \"../contexts/PaintColorContext\";\r\nconst options = [\r\n  { label: \"black\", value: \"black\" },\r\n  { label: \"red\", value: \"red\" },\r\n  { label: \"blue\", value: \"blue\" },\r\n  { label: \"hotpink\", value: \"hotpink\" },\r\n  { label: \"yellow\", value: \"yellow\" },\r\n];\r\n\r\nexport default () => {\r\n  let { color, setColor } = useContext(PaintColorContext);\r\n\r\n  return (\r\n    <label>\r\n      Color:\r\n      <select value={color} onChange={(e) => setColor(e.target.value)}>\r\n        {options.map(({ label, value }) => (\r\n          <option key={label} value={value}>\r\n            {label}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </label>\r\n  );\r\n};\r\n","import React from \"react\";\nimport Board from \"./components/Board\";\nimport BoardColor from \"./components/BoardColor\";\nimport { PaintColorProvider } from \"./contexts/PaintColorContext\";\nimport styles from \"./App.module.css\";\n\nfunction App() {\n  return (\n    <PaintColorProvider>\n      <main className={styles.App}>\n        <h1>Pixel painter</h1>\n        <BoardColor />\n        <Board width={20} height={20} />\n      </main>\n    </PaintColorProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}